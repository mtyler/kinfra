#### This is a valid configuration to create a NodePort service with static port numbers
#### http  30080
#### https 30443
##resource "kubernetes_service" "gateway" {
##  metadata {
##    name     = "${helm_release.nginx_gateway.name}-${helm_release.nginx_gateway.chart}"
##    namespace = local.namespace
##  }
##  spec {
##    type = "NodePort"
##    selector = {
##      "app.kubernetes.io/instance" = helm_release.nginx_gateway.name
##      "app.kubernetes.io/name"     = helm_release.nginx_gateway.chart
##    }
##    port {
##        name       = "http"
##        port       = 80
##        target_port = 80
##        node_port = 30080
##    }
##    port {
##        name       = "https"
##        port       = 443
##        target_port = 443
##        node_port = 30443
##    }
##  }
##}

apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: gateway
  namespace: gateway
spec:
  gatewayClassName: nginx
  listeners:
    - name: http-cp1
      port: 80
      protocol: HTTP
      hostname: cp1
    - name: http
      port: 80
      protocol: HTTP
      hostname: "*.example.com"
    - name: https
      port: 443
      protocol: HTTPS
      hostname: "*.example.com"
### Allow resources from ns: gateway to reach ns: monitoring
##resource "kubernetes_manifest" "ReferenceGrant_monitoring" {
##  manifest = {
##    "apiVersion" = "gateway.networking.k8s.io/v1beta1"
##    "kind" = "ReferenceGrant"
##    "metadata" = {
##      "name" = "monitoring-grant"
##      "namespace" = "monitoring"
##    }
##    "spec" = {
##      "from" = [
##        {
##          "group" = "gateway.networking.k8s.io"
##          "kind" = "HTTPRoute"
##          "namespace" = "gateway"
##        }
##      ]
##      "to" = [
##        {
##          "group" = ""
##          "kind" = "Service"
##        }
##      ]
##    }
##  }
##}
##
##resource "kubernetes_manifest" "http_route_grafana" {
##  manifest = {
##    apiVersion = "gateway.networking.k8s.io/v1"
##    kind = "HTTPRoute"
##    metadata = {
##      name = "http-route-grafana"
##      namespace = local.namespace
##    }
##    spec = {
##      parentRefs = [
##        {
##          name = "gateway"
##          sectionName = "http"
##        }
##      ]
##      hostnames = [
##        "graf.${local.hostname}"
##      ]
##      rules = [
##        {
##          matches = [
##            {
##              path = {
##                type = "PathPrefix"
##                value = "/"
##              }
##            }
##          ]
##          backendRefs = [
##            {
##              namespace = "monitoring"
##              name = "prometheus-grafana"
##              port = 80
##            }
##          ]
##        }
##      ]
##    }
##  }
##}
